name: Semantic Versioning

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  semantic-version:
    name: üè∑Ô∏è Gerar vers√£o sem√¢ntica
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: üîñ Recuperar a √∫ltima vers√£o remota
        id: get_last_version
        run: |
          LAST_VERSION=$(git ls-remote --tags origin | awk -F'/' '{print $3}' | sort -V | tail -n 1)
          echo "LAST_VERSION=${LAST_VERSION}" >> $GITHUB_ENV
          echo "√öltima vers√£o remota encontrada: ${LAST_VERSION}"

      - name: üîñ Gerar nova vers√£o sem√¢ntica
        id: semantic_version
        uses: paulhatch/semantic-version@v5.3.0
        with:
          tag_prefix: "v"
          major_pattern: "#major"
          minor_pattern: "#minor"
          patch_pattern: "#patch"
          change_path: "."

      - name: üìå Criar tag da vers√£o apenas se for diferente e n√£o existir no reposit√≥rio
        run: |
          NEW_VERSION="v${{ steps.semantic_version.outputs.version }}"
          echo "Nova vers√£o calculada: ${NEW_VERSION}"

          if git ls-remote --tags origin | grep -q "refs/tags/${NEW_VERSION}"; then
            echo "üîπ A tag ${NEW_VERSION} j√° existe no reposit√≥rio remoto. Nada a fazer!"
          else
            git tag ${NEW_VERSION}
            git push origin ${NEW_VERSION}
            echo "‚úÖ Nova vers√£o ${NEW_VERSION} criada com sucesso!"
          fi

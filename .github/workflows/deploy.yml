name: üöÄ Polaris - Build, Version & Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  semantic-version:
    name: üè∑Ô∏è Gerar vers√£o sem√¢ntica
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic_version.outputs.version }}
    steps:
      - name: üì• Checkout do c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîé Exibir mensagens de commit recentes
        run: git log --oneline -n 10

      - name: üîñ Gerar nova vers√£o sem√¢ntica
        id: semantic_version
        uses: paulhatch/semantic-version@v5.3.0
        with:
          tag_prefix: "v"
          major_pattern: "(BREAKING CHANGE|major:)"
          minor_pattern: "(feat:|minor:)"
          patch_pattern: "(fix:|patch:)"
          change_path: "."
          version_format: "${major}.${minor}.${patch}"
          debug: true
          ignore_patterns: "wip|WIP"

      - name: üìå Criar tag da vers√£o
        run: |
          NEW_VERSION="v${{ steps.semantic_version.outputs.version }}"
          echo "Nova vers√£o calculada: ${NEW_VERSION}"

          if git ls-remote --tags origin | grep -q "refs/tags/${NEW_VERSION}"; then
            echo "üîπ A tag ${NEW_VERSION} j√° existe. Nada a fazer!"
          else
            git tag ${NEW_VERSION}
            git push origin ${NEW_VERSION}
            echo "‚úÖ Nova vers√£o ${NEW_VERSION} criada!"
          fi

  build-and-push:
    name: üõ†Ô∏è Build & Push Docker Image
    needs: semantic-version
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout do c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîë Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üî® Build da Imagem Docker
        run: |
          VERSION="v${{ needs.semantic-version.outputs.version }}"
          docker build -t ${{ secrets.DOCKER_USERNAME }}/polaris:latest \
                       -t ${{ secrets.DOCKER_USERNAME }}/polaris:$VERSION \
                       -f polaris_api/Dockerfile .

      - name: üöÄ Push da Imagem para o Docker Hub
        run: |
          VERSION="v${{ needs.semantic-version.outputs.version }}"
          docker push ${{ secrets.DOCKER_USERNAME }}/polaris:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/polaris:$VERSION

  deploy:
    name: üöÄ Deploy no Laptop (via Terraform + Cloudflare Tunnel)
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: üì• Instalar Cloudflare Tunnel (cloudflared)
        run: |
          if ! command -v cloudflared &> /dev/null
          then
            echo "üîß Instalando Cloudflare Tunnel..."
            curl -fsSL https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
            chmod +x cloudflared
            sudo mv cloudflared /usr/local/bin/
          fi
          cloudflared --version

      - name: üîë Configurar acesso SSH via Cloudflare Tunnel
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          printf "%s" "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Obter hostname do t√∫nel via API do Cloudflare
          CLOUDFLARE_SSH_HOST=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url' | sed 's/https:\/\///')

          # Verificar se a vari√°vel foi preenchida corretamente
          if [[ -z "$CLOUDFLARE_SSH_HOST" ]]; then
            echo "‚ùå Erro: N√£o foi poss√≠vel obter o hostname do t√∫nel."
            exit 1
          fi

          echo "üîó Cloudflare SSH Host: $CLOUDFLARE_SSH_HOST"

          # Criar arquivo ~/.ssh/config corretamente
          cat <<EOF > ~/.ssh/config
            Host cloudflare-ssh
              HostName $CLOUDFLARE_SSH_HOST
              User ${{ secrets.SERVER_USER }}
              IdentityFile ~/.ssh/id_rsa
              StrictHostKeyChecking no
              ProxyCommand cloudflared access ssh --hostname $CLOUDFLARE_SSH_HOST
            EOF

          chmod 600 ~/.ssh/config

      - name: üîÑ Copiar c√≥digo para o laptop via SCP
        run: |
          CLOUDFLARE_SSH_HOST=$(grep 'HostName' ~/.ssh/config | awk '{print $2}')
          echo "üì§ Enviando c√≥digo para: $CLOUDFLARE_SSH_HOST"
          scp -o ProxyCommand="cloudflared access ssh --hostname $CLOUDFLARE_SSH_HOST" -r . ${{ secrets.SERVER_USER }}@localhost:/home/${{ secrets.SERVER_USER }}/polaris-prod

      - name: üîë Acessar o Laptop via SSH e rodar Terraform
        run: |
          CLOUDFLARE_SSH_HOST=$(grep 'HostName' ~/.ssh/config | awk '{print $2}')
          ssh -o ProxyCommand="cloudflared access ssh --hostname $CLOUDFLARE_SSH_HOST" ${{ secrets.SERVER_USER }}@localhost << 'EOF'
            echo "üöÄ Acessando o laptop via Cloudflare Tunnel..."
            cd /home/${{ secrets.SERVER_USER }}/polaris-prod

            echo "üìå Aplicando Terraform..."
            terraform init
            terraform apply -auto-approve
          EOF

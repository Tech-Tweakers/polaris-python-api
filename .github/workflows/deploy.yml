name: 🚀 Polaris - Build, Version & Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  semantic-version:
    name: 🏷️ Gerar versão semântica
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic_version.outputs.version }}
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔎 Exibir mensagens de commit recentes
        run: git log --oneline -n 10

      - name: 🔖 Gerar nova versão semântica
        id: semantic_version
        uses: paulhatch/semantic-version@v5.3.0
        with:
          tag_prefix: "v"
          major_pattern: "(BREAKING CHANGE|major:)"
          minor_pattern: "(feat:|minor:)"
          patch_pattern: "(fix:|patch:)"
          change_path: "."
          version_format: "${major}.${minor}.${patch}"
          debug: true
          ignore_patterns: "wip|WIP"

      - name: 📌 Criar tag da versão
        run: |
          NEW_VERSION="v${{ steps.semantic_version.outputs.version }}"
          echo "Nova versão calculada: ${NEW_VERSION}"

          if git ls-remote --tags origin | grep -q "refs/tags/${NEW_VERSION}"; then
            echo "🔹 A tag ${NEW_VERSION} já existe. Nada a fazer!"
          else
            git tag ${NEW_VERSION}
            git push origin ${NEW_VERSION}
            echo "✅ Nova versão ${NEW_VERSION} criada!"
          fi

  # build-and-push:
  #   name: 🛠️ Build & Push Docker Image
  #   needs: semantic-version
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 📥 Checkout do código
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: 🔑 Login no Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: 🔨 Build da Imagem Docker
  #       run: |
  #         VERSION="v${{ needs.semantic-version.outputs.version }}"
  #         docker build -t ${{ secrets.DOCKER_USERNAME }}/polaris:latest \
  #                      -t ${{ secrets.DOCKER_USERNAME }}/polaris:$VERSION \
  #                      -f polaris_api/Dockerfile .

  #     - name: 🚀 Push da Imagem para o Docker Hub
  #       run: |
  #         VERSION="v${{ needs.semantic-version.outputs.version }}"
  #         docker push ${{ secrets.DOCKER_USERNAME }}/polaris:latest
  #         docker push ${{ secrets.DOCKER_USERNAME }}/polaris:$VERSION

  deploy:
    name: 🚀 Deploy via Terraform + Cloudflare Tunnel
    needs: semantic-version
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 📥 Instalar Cloudflare Tunnel (cloudflared)
        run: |
          if ! command -v cloudflared &> /dev/null
          then
            echo "🔧 Instalando Cloudflare Tunnel..."
            curl -fsSL https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
            chmod +x cloudflared
            sudo mv cloudflared /usr/local/bin/
          fi
          cloudflared --version

      - name: 🔑 Configurar acesso SSH via Cloudflare Tunnel
        env:
          MONGO_USER: ${{ secrets.MONGO_USER }}
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
          POLARIS_API_PORT: ${{ secrets.POLARIS_API_PORT }}
          TELEGRAM_BOT_PORT: ${{ secrets.TELEGRAM_BOT_PORT }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          NGROK_PORT: ${{ secrets.NGROK_PORT }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_polaris
          chmod 600 ~/.ssh/id_polaris
          ssh-keygen -y -f ~/.ssh/id_polaris > ~/.ssh/id_polaris.pub
          echo "Host cloudflare-ssh
          HostName ${{ secrets.CLOUDFLARE_SSH_HOST }}
          User ${{ secrets.SERVER_USER }}
          IdentityFile ~/.ssh/id_polaris
          StrictHostKeyChecking no
          ProxyCommand cloudflared access ssh --hostname ${{ secrets.CLOUDFLARE_SSH_HOST }}" > ~/.ssh/config

      - name: 🔄 Copiar código para o laptop via SCP (sem .git)
        run: |
          ssh -v -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ProxyCommand="cloudflared access ssh --hostname ${{ secrets.CLOUDFLARE_SSH_HOST }}" \
              -i ~/.ssh/id_polaris \
              ${{ secrets.SERVER_USER }}@localhost "rm -rf /home/${{ secrets.SERVER_USER }}/polaris-prod && mkdir -p /home/${{ secrets.SERVER_USER }}/polaris-prod"

          rsync -avz --progress --exclude=".git" -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand=\"cloudflared access ssh --hostname ${{ secrets.CLOUDFLARE_SSH_HOST }}\" -i ~/.ssh/id_polaris" . ${{ secrets.SERVER_USER }}@localhost:/home/${{ secrets.SERVER_USER }}/polaris-prod

      - name: 🔑 Acessar o Laptop via SSH e configurar o ambiente
        run: |
          CLOUDFLARE_SSH_HOST=$(grep 'HostName' ~/.ssh/config | awk '{print $2}')
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -o ProxyCommand="cloudflared access ssh --hostname $CLOUDFLARE_SSH_HOST" \
              -i ~/.ssh/id_polaris \
              $SERVER_USER@localhost << EOF

              set -e  # Interrompe o script se algum erro ocorrer

              echo "🚀 Acessando o laptop via Cloudflare Tunnel..."
              cd /home/$SERVER_USER/polaris-prod

              echo "📌 Criando ambiente virtual..."
              python3 -m venv venv

              echo "📌 Ativando ambiente virtual e instalando dependências..."
              source venv/bin/activate
              pip install --upgrade pip
              pip install -r polaris_api/requirements.txt

              echo "📌 Criando serviço systemd para manter a API rodando..."
              sudo bash -c 'cat > /etc/systemd/system/polaris-api.service <<EOL
              [Unit]
              Description=Polaris API Service
              After=network.target

              [Service]
              User=$SERVER_USER
              WorkingDirectory=/home/$SERVER_USER/polaris-prod/polaris_api
              ExecStart=/home/$SERVER_USER/polaris-prod/venv/bin/python3 main.py
              Restart=always

              [Install]
              WantedBy=multi-user.target
              EOL'

              echo "📌 Ativando e iniciando o serviço da API..."
              sudo systemctl daemon-reload
              sudo systemctl enable polaris-api
              sudo systemctl restart polaris-api

              echo "✅ API configurada e rodando! 🚀"
          EOF

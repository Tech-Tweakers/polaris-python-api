name: 🚀 Polaris - Build, Version & Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  semantic-version:
    name: 🏷️ Gerar versão semântica
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic_version.outputs.version }}
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔎 Exibir mensagens de commit recentes
        run: git log --oneline -n 10

      - name: 🔖 Gerar nova versão semântica
        id: semantic_version
        uses: paulhatch/semantic-version@v5.3.0
        with:
          tag_prefix: "v"
          major_pattern: "(BREAKING CHANGE|major:)"
          minor_pattern: "(feat:|minor:)"
          patch_pattern: "(fix:|patch:)"
          change_path: "."
          version_format: "${major}.${minor}.${patch}"
          debug: true
          ignore_patterns: "wip|WIP"

      - name: 📌 Criar tag da versão
        run: |
          NEW_VERSION="v${{ steps.semantic_version.outputs.version }}"
          echo "Nova versão calculada: ${NEW_VERSION}"

          if git ls-remote --tags origin | grep -q "refs/tags/${NEW_VERSION}"; then
            echo "🔹 A tag ${NEW_VERSION} já existe. Nada a fazer!"
          else
            git tag ${NEW_VERSION}
            git push origin ${NEW_VERSION}
            echo "✅ Nova versão ${NEW_VERSION} criada!"
          fi

  build-and-push:
    name: 🛠️ Build & Push Docker Image
    needs: semantic-version
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔑 Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🔨 Build da Imagem Docker
        run: |
          VERSION="v${{ needs.semantic-version.outputs.version }}"
          docker build -t ${{ secrets.DOCKER_USERNAME }}/polaris:latest \
                       -t ${{ secrets.DOCKER_USERNAME }}/polaris:$VERSION \
                       -f polaris_api/Dockerfile .

      - name: 🚀 Push da Imagem para o Docker Hub
        run: |
          VERSION="v${{ needs.semantic-version.outputs.version }}"
          docker push ${{ secrets.DOCKER_USERNAME }}/polaris:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/polaris:$VERSION

  deploy:
    name: 🚀 Deploy no Laptop (via Terraform + Cloudflare Tunnel)
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout do código
        uses: actions/checkout@v4

      - name: 🔑 Criar Proxy SSH via Cloudflare Tunnel
        run: |
          mkdir -p ~/.ssh  # Cria a pasta se não existir
          chmod 700 ~/.ssh  # Garante que tem a permissão correta
          echo "Host cloudflare-ssh
          HostName ${{ secrets.CLOUDFLARE_SSH_HOST }}
          User ${{ secrets.CLOUDFLARE_SSH_USER }}
          IdentityFile ~/.ssh/id_rsa
          StrictHostKeyChecking no
          ProxyCommand cloudflared access ssh --hostname ${{ secrets.CLOUDFLARE_SSH_HOST }}" >> ~/.ssh/config
          chmod 600 ~/.ssh/config  # Protege o arquivo de configuração


      - name: 🔄 Copiar código para o laptop via SCP (usando Cloudflare)
        run: |
          scp -o ProxyCommand="cloudflared access ssh --hostname ${{ secrets.CLOUDFLARE_SSH_HOST }}" -r . ${{ secrets.CLOUDFLARE_SSH_USER }}@localhost:/home/atorres/polaris-prod

      - name: 🔑 Acessar o Laptop via SSH e rodar Terraform
        run: |
          ssh -o ProxyCommand="cloudflared access ssh --hostname ${{ secrets.CLOUDFLARE_SSH_HOST }}" ${{ secrets.CLOUDFLARE_SSH_USER }}@localhost << 'EOF'
            echo "🚀 Acessando o laptop via Cloudflare Tunnel..."
            cd /home/atorres/polaris-prod

            echo "📌 Aplicando Terraform..."
            terraform init
            terraform apply -auto-approve
          EOF
